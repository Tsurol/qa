"""empty message

Revision ID: 6414a5a1c1d6
Revises: 
Create Date: 2021-05-19 16:52:03.052207

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '6414a5a1c1d6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('qa_question_follow',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('q_id', sa.Integer(), nullable=True),
    sa.Column('is_valid', sa.SmallInteger(), nullable=True, comment='逻辑删除'),
    sa.Column('followed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['q_id'], ['qa_question.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['accounts_user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('qa_question_tags',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('q_id', sa.Integer(), nullable=True),
    sa.Column('tag_name', sa.String(length=64), nullable=False),
    sa.Column('is_valid', sa.SmallInteger(), nullable=True),
    sa.Column('added_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['q_id'], ['qa_question.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('qa_answer_collect',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('answer_id', sa.Integer(), nullable=True),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('is_valid', sa.SmallInteger(), nullable=True),
    sa.Column('collected_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['answer_id'], ['qa_answer.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['qa_question.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['accounts_user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.alter_column('accounts_login_history', 'logined_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('accounts_third', 'logined_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('accounts_third', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('accounts_user', 'status',
               existing_type=mysql.SMALLINT(),
               nullable=True,
               existing_comment='1是允许登录,0是不能登录')
    op.alter_column('accounts_user', 'is_super',
               existing_type=mysql.SMALLINT(),
               nullable=True,
               existing_comment='权限分配')
    op.alter_column('accounts_user', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('accounts_user', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('accounts_user_profile', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('accounts_user_profile', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('qa_answer', 'is_valid',
               existing_type=mysql.SMALLINT(),
               nullable=True)
    op.alter_column('qa_answer', 'answered_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('qa_answer', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('qa_answer_love', 'loved_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('qa_comment', 'love_count',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.alter_column('qa_comment', 'is_valid',
               existing_type=mysql.SMALLINT(),
               nullable=True)
    op.alter_column('qa_comment', 'is_public',
               existing_type=mysql.SMALLINT(),
               nullable=True)
    op.alter_column('qa_comment', 'commented_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('qa_comment', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('qa_question', 'reorder',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.alter_column('qa_question', 'is_valid',
               existing_type=mysql.SMALLINT(),
               nullable=True)
    op.alter_column('qa_question', 'view_count',
               existing_type=mysql.INTEGER(),
               nullable=True)
    op.alter_column('qa_question', 'questioned_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('qa_question', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('qa_question', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('qa_question', 'questioned_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('qa_question', 'view_count',
               existing_type=mysql.INTEGER(),
               nullable=False)
    op.alter_column('qa_question', 'is_valid',
               existing_type=mysql.SMALLINT(),
               nullable=False)
    op.alter_column('qa_question', 'reorder',
               existing_type=mysql.INTEGER(),
               nullable=False)
    op.alter_column('qa_comment', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('qa_comment', 'commented_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('qa_comment', 'is_public',
               existing_type=mysql.SMALLINT(),
               nullable=False)
    op.alter_column('qa_comment', 'is_valid',
               existing_type=mysql.SMALLINT(),
               nullable=False)
    op.alter_column('qa_comment', 'love_count',
               existing_type=mysql.INTEGER(),
               nullable=False)
    op.alter_column('qa_answer_love', 'loved_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('qa_answer', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('qa_answer', 'answered_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('qa_answer', 'is_valid',
               existing_type=mysql.SMALLINT(),
               nullable=False)
    op.alter_column('accounts_user_profile', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('accounts_user_profile', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('accounts_user', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('accounts_user', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('accounts_user', 'is_super',
               existing_type=mysql.SMALLINT(),
               nullable=False,
               existing_comment='权限分配')
    op.alter_column('accounts_user', 'status',
               existing_type=mysql.SMALLINT(),
               nullable=False,
               existing_comment='1是允许登录,0是不能登录')
    op.alter_column('accounts_third', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('accounts_third', 'logined_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('accounts_login_history', 'logined_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.drop_table('qa_answer_collect')
    op.drop_table('qa_question_tags')
    op.drop_table('qa_question_follow')
    # ### end Alembic commands ###
